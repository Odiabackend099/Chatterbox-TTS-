# NGINX Configuration for tts.odia.dev
# Production-ready reverse proxy with SSL, CORS, and security headers

upstream tts_backend {
    # TTS API backend servers
    server localhost:8004 max_fails=3 fail_timeout=30s;
    
    # Add more servers for load balancing:
    # server localhost:8005 max_fails=3 fail_timeout=30s;
    # server localhost:8006 max_fails=3 fail_timeout=30s;
    
    keepalive 32;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=tts_limit:10m rate=2r/s;
limit_conn_zone $binary_remote_addr zone=addr:10m;

# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name tts.odia.dev;
    
    # ACME challenge for Let's Encrypt
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name tts.odia.dev;
    
    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/tts.odia.dev/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/tts.odia.dev/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/tts.odia.dev/chain.pem;
    
    # SSL protocols and ciphers (Mozilla Modern configuration)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    
    # SSL session cache
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    
    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' https:; script-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; img-src 'self' data: https:; font-src 'self' data: https://cdn.jsdelivr.net;" always;
    
    # CORS headers (adjust origins as needed)
    set $cors_origin "";
    set $cors_credentials "";
    
    # Allow specific origins
    if ($http_origin ~* "^https?://(.*\.)?callwaitingai\.(dev|com)$") {
        set $cors_origin $http_origin;
        set $cors_credentials "true";
    }
    
    # Allow localhost for development
    if ($http_origin ~* "^https?://localhost(:[0-9]+)?$") {
        set $cors_origin $http_origin;
        set $cors_credentials "true";
    }
    
    # Apply CORS headers
    add_header Access-Control-Allow-Origin $cors_origin always;
    add_header Access-Control-Allow-Credentials $cors_credentials always;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
    add_header Access-Control-Allow-Headers "x-api-key, Authorization, Content-Type, Accept, Origin, User-Agent, DNT, Cache-Control, X-Requested-With" always;
    add_header Access-Control-Max-Age 86400 always;
    
    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
        return 204;
    }
    
    # Request limits
    client_max_body_size 15m;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 8k;
    
    # Timeouts
    client_body_timeout 30s;
    client_header_timeout 30s;
    keepalive_timeout 65s;
    send_timeout 600s;
    
    # Logging
    access_log /var/log/nginx/tts.odia.dev.access.log combined;
    error_log /var/log/nginx/tts.odia.dev.error.log warn;
    
    # Custom log format with API key ID (if present)
    log_format api_log '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_api_key" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    # API endpoints with rate limiting
    location /v1/tts {
        # Strict rate limit for TTS generation
        limit_req zone=tts_limit burst=5 nodelay;
        limit_conn addr 10;
        
        # Proxy settings
        proxy_pass http://tts_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # Timeouts for long-running TTS
        proxy_connect_timeout 10s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
        
        # Buffering
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # Enhanced logging
        access_log /var/log/nginx/tts.odia.dev.api.log api_log;
    }
    
    # Other API endpoints
    location /v1/ {
        limit_req zone=api_limit burst=20 nodelay;
        limit_conn addr 20;
        
        proxy_pass http://tts_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        access_log /var/log/nginx/tts.odia.dev.api.log api_log;
    }
    
    # Health check endpoint (no rate limit)
    location ~ ^/(health|v1/health)$ {
        proxy_pass http://tts_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        access_log off;
    }
    
    # Metrics endpoint (restrict to monitoring IPs)
    location /metrics {
        # Allow only from specific IPs
        allow 10.0.0.0/8;      # Private network
        allow 172.16.0.0/12;   # Private network
        allow 192.168.0.0/16;  # Private network
        deny all;
        
        proxy_pass http://tts_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        
        access_log off;
    }
    
    # API documentation
    location ~ ^/(docs|redoc|openapi\.json)$ {
        limit_req zone=api_limit burst=10 nodelay;
        
        proxy_pass http://tts_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Root endpoint
    location = / {
        proxy_pass http://tts_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        
        access_log off;
    }
    
    # Block all other paths
    location / {
        return 404;
    }
    
    # Custom error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        internal;
        return 404 '{"error": "Not Found", "status": 404}';
        add_header Content-Type application/json;
    }
    
    location = /50x.html {
        internal;
        return 500 '{"error": "Internal Server Error", "status": 500}';
        add_header Content-Type application/json;
    }
}

